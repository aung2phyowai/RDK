function trial = rdkGenerateTrialParams( trial )

region = trial.dotstim(1).region;
motion = trial.dotstim(1).motion;

switch trial.paradigm
    case 'constant'       
        % REGION: Does shape or size of dot region change over time?        
        region.space_mod_mode = 'none'; %{'none', 'exp_ring', 'rot_wedge', 'trans'}
        
        % MOTION: Do motion parameters change over time?
        
        motion.speed_mod_mode = 'none'; %{'none', 'motion/static'}
        motion.direction_mod_mode   = 'none'; %{'none', 'coh/incoh'}        
    case 'mofo'
        % REGION: Does shape or size of dot region change over time?
        % Two regions at least...
        trial.ndotstim = 2;
                        
        region.space_mod_mode = 'none'; %{'none', 'exp_ring', 'rot_wedge', 'trans'}
        
        % MOTION: Do motion parameters change over time?
        % Whether speed or direction vary depends on motion form subtype
        
        % If varying direction, then direction modulates, if speed...,
        % coherence, etc.
        
        motion.speed_mod_mode = 'none'; %{'none'}
        motion.direction_mod_mode   = 'none'; %{'none', 'coh/incoh'}
        
        % Have to reconcile space constraints of both regions...
                
    case 'moco'
        
        % Region of stimulation constant
        % Motion directions vary, speeds constant
        
        motion.direction_mod_mode   = 'coh/incoh'; %{'none', 'coh/incoh'}
        
        motion.direction_duty_cycle = .5; % [0,1]
        motion.direction_cycle_fr   = 60; % 1 Hz @ 60 fps or compute
        motion.direction_cycle_hz   = display.fps/motion.cycle_fr;
        
    case 'retinotopy'
        % Region of stimulation varies over time
        % Motion params may vary also
    case 'optic_flow'
    otherwise
end

%----   Region parameters

if ~strcmp( region.space_mod_mode, 'none' )
    region.space_mod_period_s = trial.duration_secs*region.space_duty_cycle;% DEFAULT
    region.space_mod_period_fr = round( region.space_mod_period_s * display.update_hz );
    region.space_mod_rad_per_fr = 2*pi/(region.space_mod_period_s * display.update_hz );
else
    region.space_duty_cycle = 1;
    region.space_mod_period_s = trial.duration_secs;% DEFAULT
    region.space_mod_period_fr = round( region.space_mod_period_s * display.update_hz );
    region.space_mod_rad_per_fr = 2*pi/(region.space_mod_period_s * display.update_hz );
end 

region.time_mod_freq_hz = 0;
if region.time_mod_freq_hz ~= 0;
    region.time_mod_fr_period = round( display.fps * region.time_mod_freq_hz/display.update_hz );
end


return
